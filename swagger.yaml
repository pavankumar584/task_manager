openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: RESTful API for Task Management System

servers:
  - url: http://localhost:3000
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: JohnDoe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: StrongP@ssword123
        roles:
          type: array
          items:
            type: string
          example: ["User"]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: StrongP@ssword123

    AuthResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string

    UserProfile:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        managerId:
          type: string
          nullable: true

    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date
        priority:
          type: string
        status:
          type: string
        assignedTo:
          $ref: '#/components/schemas/UserProfile'
        createdBy:
          $ref: '#/components/schemas/UserProfile'

    TaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date
        priority:
          type: string
        assignedTo:
          type: string

    AssignTaskRequest:
      type: object
      required:
        - taskId
        - userId
      properties:
        taskId:
          type: string
        userId:
          type: string

    AnalyticsResponse:
      type: object
      properties:
        total:
          type: integer
        completed:
          type: integer
        pending:
          type: integer
        overdue:
          type: integer

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/getProfile:
    get:
      tags:
        - Users
      summary: Get logged-in user profile
      security:
        - bearerAuth: []
      description: Cached for 30 seconds per user
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks with optional filters
      security:
        - bearerAuth: []
      description: Cached for 30 seconds per user
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: priority
          schema:
            type: string
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
        - in: query
          name: assignedTo
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags:
        - Tasks
      summary: Create a task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        200:
          description: Task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    $ref: '#/components/schemas/Task'

  /users/task/{id}:
    put:
      tags:
        - Tasks
      summary: Update task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        200:
          description: Task updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    $ref: '#/components/schemas/Task'

    delete:
      tags:
        - Tasks
      summary: Delete task
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Task deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    $ref: '#/components/schemas/Task'

  /manager/assign:
    post:
      tags:
        - Manager
      summary: Manager assigns task to a team member
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTaskRequest'
      responses:
        200:
          description: Task assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /admin/assign-task:
    post:
      tags:
        - Admin
      summary: Admin assigns task to any user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTaskRequest'
      responses:
        200:
          description: Task assigned successfully by Admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    $ref: '#/components/schemas/Task'

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'

  /analytics/user:
    get:
      tags:
        - Analytics
      summary: Get user task stats
      security:
        - bearerAuth: []
      responses:
        200:
          description: User stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'

  /analytics/team:
    get:
      tags:
        - Analytics
      summary: Get team task stats
      security:
        - bearerAuth: []
      responses:
        200:
          description: Team stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'
